From: Shengjing Zhu <zhsj@debian.org>
Date: Sat, 20 Aug 2022 05:43:43 +0800
Subject: Disable sprig template function

github.com/go-task/slim-sprig is not packaged.

Forwarded: not-needed
---
 ginkgo/bootstrap_command.go    | 3 +--
 ginkgo/generate_command.go     | 4 +---
 integration/subcommand_test.go | 4 ++--
 3 files changed, 4 insertions(+), 7 deletions(-)

diff --git a/ginkgo/bootstrap_command.go b/ginkgo/bootstrap_command.go
index ea10e97..49a6100 100644
--- a/ginkgo/bootstrap_command.go
+++ b/ginkgo/bootstrap_command.go
@@ -12,7 +12,6 @@ import (
 
 	"go/build"
 
-	sprig "github.com/go-task/slim-sprig"
 	"github.com/onsi/ginkgo/ginkgo/nodot"
 )
 
@@ -178,7 +177,7 @@ func generateBootstrap(agouti, noDot, internal bool, customBootstrapFile string)
 		templateText = bootstrapText
 	}
 
-	bootstrapTemplate, err := template.New("bootstrap").Funcs(sprig.TxtFuncMap()).Parse(templateText)
+	bootstrapTemplate, err := template.New("bootstrap").Parse(templateText)
 	if err != nil {
 		panic(err.Error())
 	}
diff --git a/ginkgo/generate_command.go b/ginkgo/generate_command.go
index f792716..359bf54 100644
--- a/ginkgo/generate_command.go
+++ b/ginkgo/generate_command.go
@@ -10,8 +10,6 @@ import (
 	"strconv"
 	"strings"
 	"text/template"
-
-	sprig "github.com/go-task/slim-sprig"
 )
 
 func BuildGenerateCommand() *Command {
@@ -160,7 +158,7 @@ func generateSpecForSubject(subject string, agouti, noDot, internal bool, custom
 		templateText = specText
 	}
 
-	specTemplate, err := template.New("spec").Funcs(sprig.TxtFuncMap()).Parse(templateText)
+	specTemplate, err := template.New("spec").Parse(templateText)
 	if err != nil {
 		return err
 	}
diff --git a/integration/subcommand_test.go b/integration/subcommand_test.go
index b92e85f..c9ae29e 100644
--- a/integration/subcommand_test.go
+++ b/integration/subcommand_test.go
@@ -113,7 +113,7 @@ var _ = Describe("Subcommand", func() {
 			Ω(content).Should(ContainSubstring("// This is a foo_test test"))
 		})
 
-		It("should generate a bootstrap file using a template that contains functions when told to", func() {
+		XIt("should generate a bootstrap file using a template that contains functions when told to", func() {
 			templateFile := filepath.Join(pkgPath, ".bootstrap")
 			ioutil.WriteFile(templateFile, []byte(`package {{.Package}}
 
@@ -234,7 +234,7 @@ var _ = Describe("Subcommand", func() {
 				Ω(content).Should(ContainSubstring("// This is a foo_bar_test test"))
 			})
 
-			It("should generate a test file using a template that contains functions", func() {
+			XIt("should generate a test file using a template that contains functions", func() {
 				templateFile := filepath.Join(pkgPath, ".generate")
 				ioutil.WriteFile(templateFile, []byte(`package {{.Package}}
 				import (
